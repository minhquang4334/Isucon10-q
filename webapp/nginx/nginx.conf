user www-data;
worker_processes 1; # autoにしたら、コア数と同じ数まで増やすが、Isuconならただ1コアのCPUしか提供してくれないので、1にしても問題ない
pid /run/nginx.pid;
#include /etc/nginx/modules-enabled/*.conf;
worker_rlimit_nofile 16000; # worker_connectionsの4倍 程度


error_log /var/log/nginx/error.log error; # errorログパース設定

events {
    worker_connections 4096; 
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_tokens off;
    sendfile on;

    # tcp
    tcp_nopush  on; # nginxはデフォルトでファイルを送り出す際にsendfileシステムコールを使いますが、sendfileの前に動くHTTPヘッダのパケット書き出しを遅延させ、ヘッダとファイルの中身を一度に送り出すように調整します
    tcp_nodelay on;

    # keepalive
    keepalive_timeout 120; # nginx のデフォルトは65
    keepalive_requests 500; # 1接続中に何回のリクエストまで受けるかの設定nginxのデフォルトは100しかないため

    # client
    client_max_body_size 10m;
    #open_file_cache max=100 inactive=65s;
    
    # log
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # Proxy cache 設定。使いどころがあれば。1mでkey8,000個。1gまでcache。
    #proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=1h;
    #proxy_temp_path  /var/cache/nginx/tmp;
    
    # Use nginx like load balancer
    #upstream app {
    #  server 127.0.0.1; #1
    #  server 172.31.33.248; #2
    #  keepalive 60;
    #}

    server {
        root /www/data;
        listen 80 default_server;
        listen [::]:80 default_server;


        if ( $http_user_agent ~ (Mediapartners-ISUCON|ISUCONCoffee|isubot|Isupider) ) {
          return 503;
        }


        if ( $http_user_agent ~ /ISUCONbot(-Mobile)?/ ) {
          return 503;
        }

        if ( $http_user_agent ~ /ISUCONFeedSeeker(Beta)?/ ) {
          return 503;
        }

        if ( $http_user_agent ~ /Isupider(-image)?\+/ ) {
          return 503;
        }

        location / {
          root /www/data;
        }

        # こちら、Isuconの問題により修正する必要
        location /api {
          proxy_pass http://localhost:1323;
        }

        location /initialize {
          proxy_pass http://localhost:1323;
        }

        # Proxy cache: Redisを使うとき、設定する
        # 
        location /cached/ {
          # proxy_cache zone1;
          #proxy_pass http://localhost:9292/;
          # レスポンスヘッダにキャッシュヒットしたかどうかを含める
          add_header X-Nginx-Cache $upstream_cache_status;
        }   

        location ~ .*\.(htm|html|css|js|jpg|png|gif|ico) {
          expires 24h;
          add_header Cache-Control public;
          gzip on;  # cpu 使うのでメリット・デメリット見極める必要あり。gzip_static 使えるなら事前にgzip圧縮した上でそちらを使う。
          gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
          gzip_static on;  # nginx configure時に --with-http_gzip_static_module 必要
          gzip_vary on;
          gzip_disable      "MSIE [1-6]\.";
          gzip_comp_level   1;
          gzip_proxied      any;
          gzip_buffers      4 8k;
          gzip_min_length   1100;
        }
    }

  }
